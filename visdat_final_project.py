# -*- coding: utf-8 -*-
"""VISDAT_FINAL_PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fTexW06rNFDg8rnR8GN3vY05vieg2HuR

### LIBRARIES
"""

import os
import numpy as np
import pandas as pd
import random
import seaborn as sns

import datetime as datetime
import matplotlib.dates as dates
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objs as go

import pandas as pd
from bokeh.io import curdoc,show,output_file,show,output_notebook,push_notebook
from bokeh.plotting import figure
from bokeh.models import HoverTool, ColumnDataSource
from bokeh.models import CategoricalColorMapper
from bokeh.palettes import Spectral6
from bokeh.layouts import widgetbox, row, gridplot
from bokeh.models import Slider, Select
from bokeh.io import output_notebook

from bokeh.io import output_file,show,output_notebook,push_notebook
from bokeh.plotting import *
from bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper
from bokeh.layouts import row,column,gridplot,widgetbox
from bokeh.models.widgets import Tabs,Panel
output_notebook()


from google.colab import files
files.upload()

data = pd.read_csv("covid_19_indonesia_time_series_all.csv")
data.info()

data = data.rename(columns={'Date': 'date', 
                        'Location ISO Code': 'location_iso_code', 
                        'Location': 'location', 
                        'New Cases': 'new_cases', 
                        'New Deaths': 'new_deaths',
                        'New Recovered': 'new_recovered', 
                        'New Active Cases': 'new_active_cases', 
                        'Total Cases': 'total_cases', 
                        'Total Deaths': 'total_deaths',
                        'Total Recovered': 'total_recovered', 
                        'Total Active Cases': 'total_active_cases', 
                        'Location Level': 'location_level',
                        'City or Regency': 'city_or_regency', 
                        'Province': 'province', 
                        'Country': 'country', 
                        'Continent': 'continent', 
                        'Island': 'island',
                        'Time Zone': 'time_zone', 
                        'Special Status': 'special_status', 
                        'Total Regencies': 'total_regencies', 
                        'Total Cities': 'total_cities',
                        'Total Districts': 'total_districts', 
                        'Total Urban Villages': 'total_urban_villages', 
                        'Total Rural Villages': 'total_rural_villages',
                        'Area (km2)': 'area_(km2)', 
                        'Population': 'population', 
                        'Population Density': 'population_density', 
                        'Longitude': 'longitude',
                        'Latitude': 'latitude', 
                        'New Cases per Million': 'new_cases_per_million', 
                        'Total Cases per Million': 'total_cases_per_million',
                        'New Deaths per Million': 'new_deaths_per_million', 
                        'Total Deaths per Million': 'total_deaths_per_million',
                        'Total Deaths per 100rb': 'total_deaths_per_100rb', 
                        'Case Fatality Rate': 'case_fatality_rate', 
                        'Case Recovered Rate': 'case_recovered_rate',
                        'Growth Factor of New Cases': 'growth_factor_of_new_cases', 
                        'Growth Factor of New Deaths': 'growth_factor_of_new_deaths'})

data['date'] = pd.to_datetime(data['date'])

data["DateString"] = data["date"].dt.strftime("%Y%m%d")

data['DateString'] = data['DateString'].astype(float)

data.head()

data.set_index('DateString', inplace=True)

data.dtypes

data = data.loc[:,['date','location','total_cases','total_deaths','province','population','island','continent']]

data.head()

data.dropna(how="any",inplace = True)
data.info()

data

# Make a list of the unique values from the region column: regions_list
regions_list = data.location.unique().tolist()

source = ColumnDataSource(data={
    'x'    : data[data['date'] == '2020-03-01']['total_deaths'],
    "y"     : data[data['date'] == '2020-03-01']['total_cases'],
    "Genre" : data[data['date'] == '2020-03-01']['island'],
    "Publisher" : data[data['date'] == '2020-03-01']['province'],
    "Platform" : data[data['date'] == '2020-03-01']['location'],
})

# Create the figure: plotFertility (children per woman)
plot = figure(title='Covid-19 Indonesia', x_axis_label='total_deaths', y_axis_label='total_cases',
           plot_height=400, plot_width=700, tools=[HoverTool(tooltips='@Publisher')])

color_mapper = CategoricalColorMapper(factors=regions_list, palette=Spectral6)

# Add a circle glyph to the figure p
plot.circle(x='x', y='y', source=source, fill_alpha=0.8,
           color=dict(field='Platform', transform=color_mapper), legend='Platform')

# Set the legend and axis attributes
plot.legend.location = 'bottom_left'

# Define the callback function: update_plot
def update_plot(attr, old, new):
    # set the `yr` name to `slider.value` and `source.data = new_data`
    yr = slider.value
    x = x_select.value
    y = y_select.value
    # Label axes of plot
    plot.xaxis.axis_label = x
    plot.yaxis.axis_label = y
    # new data
    new_data = {
    'x'       : data.loc[yr][x],
    'y'       : data.loc[yr][y],
    'province': data.loc[yr].Province,
    'Island'  : data.loc[yr].Island,
    }
    source.df = new_data
    push_notebook()  # this push method is vital for this update method
    
    # Add title to figure: plot.title.text
    plot.title.text = 'Covid-19 data for %d' % yr
show(plot,notebook_handle=True) 

# Make a slider object: slider
slider = Slider(start=2020, end=2021, step=1, value=2020, title='Year')
slider.on_change('value',update_plot)

# Make dropdown menu for x and y axis
# Create a dropdown Select widget for the x data: x_select
x_select = Select(
    options=['total_deaths', 'total_cases', 'latitude', 'langitude'],
    value='total_deaths',
    title='x-axis data'
)
# Attach the update_plot callback to the 'value' property of x_select
x_select.on_change('value', update_plot)

# Create a dropdown Select widget for the y data: y_select
y_select = Select(
    options=['total_deaths', 'total_cases', 'latitude', 'langitude'],
    value='total_cases',
    title='y-axis data'
)
# Attach the update_plot callback to the 'value' property of y_select
y_select.on_change('value', update_plot)
    
# Create layout and add to current document
layout = row(widgetbox(slider, x_select, y_select), plot)
curdoc().add_root(layout)


# In[5]:


# bokeh serve --show myapp.py


# For more on all things interaction in Bokeh, [**Adding Interactions**](https://docs.bokeh.org/en/latest/docs/user_guide/interaction.html) in the Bokeh User Guide is a great place to start.

# In[ ]:

# from bokeh.io import show
# from bokeh.models import CustomJS, Dropdown

# menu = [("Total Cases", "total_cases"), ("Total Deaths", "total_deaths")]

# dropdown = Dropdown(label="Dropdown button", button_type="warning", menu=menu)
# dropdown.js_on_event("menu_item_click", CustomJS(code="console.log('dropdown: ' + this.item, this.toString())"))

# show(dropdown)